<section class="blogpost">

{{! 
    <div class="row">
        <div class="col-xs-12">
            <h1>Number of years USA was at war, during your lifetime</h1>
            <h2>Originally on <a target="_blank" href="https://www.washingtonpost.com/politics/2020/01/08/nearly-quarter-americans-have-never-experienced-us-time-peace/">The Washington Post</a> by <a target="_blank" href="https://twitter.com/pbump">@pbump</a></h2>
        </div>
    </div> 
}}

    <div class="row" id="contentBox">
        <div>
            <ul id="tabs">
            </ul>
        </div>
        <div class="col-xs-12 col-md-12" id='friends'>
            <table>
                <thead></thead>
                <tbody></tbody>
            </table>

        </div>
    </div>
</section>

<script src="/js/require.js"></script>

<style>
.sidebar {
    display: none;
}
.project {
    padding: 5px;    
}
.project:hover {
    background: lightgrey;
}

td {
    border: solid 1px black;
    padding: 2px;
    text-align: center;
}

td.dates {
    text-align: right;
}

</style>

<script>
    const md = new showdown.Converter({openLinksInNewWindow: true});


var margin = ({top: 20, right: 20, bottom: 30, left: 40})
var height = 600,
    width = 900;
var x, y;
var bins = [];
var buckets = [];

var dateOpts = { year: 'numeric', month: 'long', day: 'numeric' };

var test = null;

    $.ajax( {
        dataType: 'json',
        contentType: "application/json",
        url: '/friends.json',
        error: function(e) {
            console.log("Error", e);
        },
        success: function(data) {
            test = data.test;
            data = data.friends.map(d => {return {timestamp: d.timestamp * 1000, name: decodeFBEmoji(d.name)}});
            console.log("data", data);

            var firstDate = data[0].timestamp,
                lastDate = data[data.length -1].timestamp;

            y = d3.scaleLinear()
                .domain([0, d3.max(bins, d => d.length)]).nice()
                .range([height - margin.bottom, margin.top])

            x = d3.scaleLinear()
                .domain(d3.extent(data, d => d.timestamp)).nice()
                .range([margin.left, width - margin.right])

            bins = d3.histogram()
                .domain(x.domain())
                .thresholds(x.ticks(40))(data, d => d.timestamp);

            console.log("bins", bins);

            data.forEach(dot => {
                bins.forEach((bin, i) => {
                    if(dot.timestamp > bin.x0 && dot.timestamp < bin.x1 ) {
                        buckets[i] = buckets[i] || [];
                        buckets[i].push(dot);
                    }
                })
            })

            console.log("buckets", buckets);

            var header = d3.select("#friends table thead").append("tr");
            header.append("th");
            header.append("th").text("Date");
            header.append("th").text("Friends");
            header.append("th").text("Count");
            header.append("th").text("Notes");


            d3.select("#friends table tbody")
                .selectAll("tr")
                .data(buckets)
                .enter()
                .append("tr").attr("id", (d,i) => `tr-${i}`)
                .each((d, i) => {
                    if(d) {

                        var tr = d3.select(`#tr-${i}`);
                        tr.append("td").text(i);
                        tr.append("td").classed("dates", true).text(new Date(bins[i].x0).toLocaleDateString("en-GB", dateOpts));

                        tr.append("td").text(d.map(dot => dot.name).reverse().join(", "))
                        tr.append("td").text(d.length);
                        
                        tr.append("td").append("textarea");
                    }
                })
        }
    });

/**
    {{! d3.csv("/melbourne_export.csv", function(d, i, columns){
        if(d.hidden_at == "") {
            console.log(d);
            return d;
        } else {
            return null;
        }
    }).then(function(d){
        console.log(d);
        d3.select("#AwesomeStuff")
        .selectAll("div")
        .data(d)
        .enter()
        .append("div")
        .classed("project", true)
        .attr("id", (d) => "project-"+d.id)
        .each(function(d){
            var tab = d3.select("#tabs").append("li");
            tab.append("input").attr("id", "tab-"+d.id).attrs({
                type: 'radio',
                name: 'tabs'
            });
            tab.append("label").attr("for", "tab-"+d.id).text(d.title);

            var box = d3.select(this);
            box.append("h1")
                .append("a")
                .attr("href", d.url)
                .text(d.title);
            box.append("h2").text(d.name);

            box.append("div").attr("id", "description-"+d.id);
            $("#description-"+d.id).html(md.makeHtml(d.about_project));

            box.append('h3').text('How it will be spent:');

            box.append("div").attr("id", "use-"+d.id);
            $("#use-"+d.id).html(md.makeHtml(d.use_for_money));

            console.log(d);
        })
    }); }}


*/


// From https://dev.to/raicuparta/ditching-worthless-friends-with-facebook-data-and-javascript-3f2i
function decodeFBEmoji (fbString, verbose) {
  // Convert String to Array of hex codes
  const codeArray = (
    fbString  // starts as '\u00f0\u009f\u0098\u00a2'
    .split('')
    .map(char =>
      char.charCodeAt(0)  // convert '\u00f0' to 0xf0
    )
  );  // result is [0xf0, 0x9f, 0x98, 0xa2]


  // Convert plain JavaScript array to Uint8Array
  const byteArray = Uint8Array.from(codeArray);


  if(verbose) {
    console.log('fbString', fbString);
    console.log('hex', codeArray.map(char => `\\u00${char.toString(16)}`).join(''));
    console.log('codeArray', codeArray);  
    console.log('byteArray', byteArray);
  }

  // Decode byte array as a UTF-8 string
  return new TextDecoder('utf-8').decode(byteArray);  // 'ðŸ˜¢'
}

</script>




