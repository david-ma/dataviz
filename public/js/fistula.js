"use strict";(self.webpackChunkdataviz=self.webpackChunkdataviz||[]).push([[663],{459:(t,e,n)=>{var a=n(345),i=n(165),r=n(569),s=n.n(r);n(717),console.log("Running fistula.ts");const o={Continent:[],Incontinent:[],Partial:[]};let h=0;s().when(s().ready).then((function(){new a.t1({element:"exampleDiv",margin:20,width:800,height:600,nav:!1}).scratchpad((t=>{i.csv("/dataviz/fistula.csv",(function(t){let e={PatientID:t["Patient ID"],Country:t.Country,Age:parseInt(t.Age),PatientSymptoms:t["Patient symptoms"],YearsLeaking:parseInt(t["Years leaking"]),OutcomeOfSurgery:t["Outcome of surgery"],YearsLost:parseFloat(t["Years lost"]),YearsGained:parseFloat(t["Years gained"]),Cost:parseInt(t["Surgery cost (USD)"])};return e.YearsLost>h&&(h=e.YearsLost),e.YearsGained>h&&(h=e.YearsGained),"Continent"===t["Outcome of surgery"]?o.Continent.push(e):"Incontinent"===t["Outcome of surgery"]?o.Incontinent.push(e):"Partial Continence"===t["Outcome of surgery"]&&o.Partial.push(e),e})).then((e=>{console.log("maxYears",h),t.svg.append("line").attrs({x1:.2*t.width,y1:t.height/2,x2:.9*t.width,y2:t.height/2,stroke:"black"}),t.svg.append("line").attrs({x1:.2*t.width,y1:.1*t.height,x2:.2*t.width,y2:.9*t.height,stroke:"black"}),o.Continent=o.Continent.sort(((t,e)=>e.YearsGained-t.YearsGained));var n=o.Continent.length,a=.45*t.height/h,i=o.Continent[Math.floor(n/4)].YearsGained*a,r=o.Continent[Math.floor(3*n/4)].YearsGained*a,s=t.height/2;t.svg.append("rect").attrs({x:.3*t.width,width:.05*t.width,y:s-i,height:i-r,fill:"white",stroke:"black"});var l=o.Continent[Math.floor(n/2)].YearsGained*a;t.svg.append("line").attrs({x1:.3*t.width,x2:.35*t.width,y1:s-l,y2:s-l,stroke:"black"}),o.Incontinent=o.Incontinent.sort(((t,e)=>e.YearsGained-t.YearsGained)),n=o.Incontinent.length,a=.45*t.height/h,i=o.Incontinent[Math.floor(n/4)].YearsGained*a,r=o.Incontinent[Math.floor(3*n/4)].YearsGained*a,s=t.height/2,t.svg.append("rect").attrs({x:.4*t.width,width:.05*t.width,y:s-i,height:i-r,fill:"white",stroke:"black"}),l=o.Incontinent[Math.floor(n/2)].YearsGained*a,t.svg.append("line").attrs({x1:.4*t.width,x2:.45*t.width,y1:s-l,y2:s-l,stroke:"black"}),o.Partial=o.Partial.sort(((t,e)=>e.YearsGained-t.YearsGained)),n=o.Partial.length,a=.45*t.height/h,i=o.Partial[Math.floor(n/4)].YearsGained*a,r=o.Partial[Math.floor(3*n/4)].YearsGained*a,s=t.height/2,t.svg.append("rect").attrs({x:.5*t.width,width:.05*t.width,y:s-i,height:i-r,fill:"white",stroke:"black"}),l=o.Partial[Math.floor(n/2)].YearsGained*a,t.svg.append("line").attrs({x1:.5*t.width,x2:.55*t.width,y1:s-l,y2:s-l,stroke:"black"}),o.Continent=o.Continent.sort(((t,e)=>e.YearsLost-t.YearsLost)),n=o.Continent.length,a=.45*t.height/h,i=o.Continent[Math.floor(n/4)].YearsLost*a,r=o.Continent[Math.floor(3*n/4)].YearsLost*a,s=t.height/2,t.svg.append("rect").attrs({x:.3*t.width,width:.05*t.width,y:s+r,height:i-r,fill:"white",stroke:"black"}),l=o.Continent[Math.floor(n/2)].YearsLost*a,t.svg.append("line").attrs({x1:.3*t.width,x2:.35*t.width,y1:s+l,y2:s+l,stroke:"black"}),o.Incontinent=o.Incontinent.sort(((t,e)=>e.YearsLost-t.YearsLost)),n=o.Incontinent.length,a=.45*t.height/h,i=o.Incontinent[Math.floor(n/4)].YearsLost*a,r=o.Incontinent[Math.floor(3*n/4)].YearsLost*a,s=t.height/2,t.svg.append("rect").attrs({x:.4*t.width,width:.05*t.width,y:s+r,height:i-r,fill:"white",stroke:"black"}),l=o.Incontinent[Math.floor(n/2)].YearsLost*a,t.svg.append("line").attrs({x1:.4*t.width,x2:.45*t.width,y1:s+l,y2:s+l,stroke:"black"}),o.Partial=o.Partial.sort(((t,e)=>e.YearsLost-t.YearsLost)),n=o.Partial.length,a=.45*t.height/h,i=o.Partial[Math.floor(n/4)].YearsLost*a,r=o.Partial[Math.floor(3*n/4)].YearsLost*a,s=t.height/2,t.svg.append("rect").attrs({x:.5*t.width,width:.05*t.width,y:s+r,height:i-r,fill:"white",stroke:"black"}),l=o.Partial[Math.floor(n/2)].YearsLost*a,t.svg.append("line").attrs({x1:.5*t.width,x2:.55*t.width,y1:s+l,y2:s+l,stroke:"black"}),console.log(o)}))}))}))}},t=>{t(t.s=459)}]);