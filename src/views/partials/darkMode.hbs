{{> fontAwesome }}

<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Source+Code+Pro:ital,wght@0,200..900;1,200..900&display=swap"
  rel="stylesheet">

<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link
  href="https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap"
  rel="stylesheet">


<style>
  :root {
    --dark: #17050e;
    --light: #fff2da;

    --agrf-orange: #f7931d;
    --agrf-blue: #06aeef;

    --yellow: #f9c836;
    --pink: #e63b7a;
    --blue: #596be1;
    --navy: #181369;
    --grey: #f9e6c3;

    --olive: #83781bff;
    --olivine: #95b46aff;
    --asparagus: #709255ff;
    --dark-moss-green: #3e5622ff;
    --dark-green: #172815ff;

    --bgCol: var(--light);
    --textCol: var(--dark);

    --frameBg: var(--olive);
    --frameText: var(--dark);

    --highlight: var(--yellow);

    font-size: clamp(1.2rem, 2vw, 24px);
  }

  :root[data-theme='dark'] {
    --bgCol: var(--dark);
    --textCol: var(--light);

    --highlight: var(--blue);

    --frameBg: var(--asparagus);
    --frameText: var(--light);

    --grey: #2e0a1d;
  }

  #dataviz_blog {
    background-color: var(--bgCol);
    color: var(--textCol);

    button {
      background-color: var(--frameBg);
      color: var(--frameText);
    }

    pre {
      border: 1px solid var(--dark-moss-green);
      padding: 0.5em 1em;
      background-color: var(--olivine);
      color: var(--frameText);
      font-family: "Source Code Pro", 'Courier New', Courier, monospace;
      font-optical-sizing: auto;
      font-style: normal;
    }

    #dashboard,
    #phaseTable,
    #preview {
      background-color: var(--frameBg);
      color: var(--frameText);
      padding: 1em;
      margin-top: 3em;

      max-width: 90vw;
      overflow: scroll;

      input,
      select {
        background-color: var(--frameBg);
        color: var(--frameText);
      }

      table {
        th {
          background-color: var(--olive);
          color: var(--frameText);
        }

        background-color: var(--olivine);
        color: var(--frameText);

        a {
          color: var(--dark-moss-green);
          font-weight: bold;
          text-decoration: underline;
        }

        tr {
          background-color: var(--grey);
        }

        th {
          text-transform: capitalize;
        }

        tbody tr:hover {
          background-color: var(--olivine);
          filter: brightness(1.1);
        }
      }
    }
  }


  body {
    background-color: var(--bgCol);
    background-image: linear-gradient(var(--grey) 1px, transparent 1px), linear-gradient(to right, var(--grey) 1px, var(--bgCol) 1px);
    background-size: 20px 20px;

    color: var(--textCol);

    display: flex;
    flex-flow: column;
    justify-content: space-between;

    width: 100%;
    height: 100vh;
    margin: 0;
    padding: 1em;

    font-family: "Roboto", serif;
  }
</style>

<button id="lightToggle" title="Toggle Light/Dark Mode">
  <i id="lightIcon" class="fa-solid fa-sun" aria-hidden="true"></i>
</button>

<script>
  if (typeof (theme) === 'undefined') { let theme = null; }
  theme = localStorage.getItem('theme') || 'system';
  document.documentElement.dataset.theme = theme;

  // THEME TOGGLE
  const buttonLight = document.getElementById('lightToggle');
  const lightIcon = document.getElementById('lightIcon');
  const emblem = document.getElementById('emblem');

  if (theme == 'system') {
    theme = (window.matchMedia('(prefers-color-scheme: light)').matches) ? 'light' : 'dark';
  }

  document.documentElement.dataset.theme = theme;
  setTheme(theme);

  function setTheme(theme) {
    document.documentElement.dataset.theme = theme;
    // Update Icons/Emblems
    if (theme == 'light') {
      lightIcon.classList.remove("fa-sun");
      lightIcon.classList.add("fa-moon");
    } else {
      lightIcon.classList.remove("fa-moon");
      lightIcon.classList.add("fa-sun");
    }
  }

  buttonLight.addEventListener('click', () => {
    theme = (theme == 'light') ? 'dark' : 'light';
    localStorage.setItem('theme', theme);
    setTheme(theme);
  });


  //TWEMOJI
  // twemoji.parse(document.body)
</script>